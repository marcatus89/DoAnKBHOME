    @page "/admin/users/create"
    @attribute [Authorize(Roles = "Admin")]
    @using Microsoft.AspNetCore.Identity
    @using Microsoft.EntityFrameworkCore
    @inject UserManager<IdentityUser> UserManager
    @inject RoleManager<IdentityRole> RoleManager
    @inject NavigationManager Navigation

    <h3>Tạo Người dùng mới</h3>

    <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (errorMessages.Any())
        {
            <div class="alert alert-danger">
                @foreach (var error in errorMessages)
                {
                    <p>@error</p>
                }
            </div>
        }

        <div class="form-group mb-3">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="Model.Email" />
        </div>
        <div class="form-group mb-3">
            <label>Mật khẩu</label>
            <InputText type="password" class="form-control" @bind-Value="Model.Password" />
        </div>
        <div class="form-group mb-3">
            <label>Phân quyền</label>
            @foreach (var role in allRoles)
            {
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="@role.Id" value="@role.Name"
                           @onchange="(ChangeEventArgs e) => {
                               if ((bool)(e.Value ?? false)) { Model.SelectedRoles.Add(role.Name); }
                               else { Model.SelectedRoles.Remove(role.Name); }
                           }" />
                    <label class="form-check-label" for="@role.Id">@role.Name</label>
                </div>
            }
        </div>

        <button type="submit" class="btn btn-primary">Tạo người dùng</button>
        <a href="/admin/users" class="btn btn-secondary">Hủy</a>
    </EditForm>

    @code {
        private CreateUserModel Model { get; set; } = new();
        private List<IdentityRole> allRoles = new();
        private List<string> errorMessages = new();

        protected override async Task OnInitializedAsync()
        {
            allRoles = await RoleManager.Roles.ToListAsync();
        }

        private async Task HandleValidSubmit()
        {
            errorMessages.Clear();
            var newUser = new IdentityUser { UserName = Model.Email, Email = Model.Email, EmailConfirmed = true };
            var result = await UserManager.CreateAsync(newUser, Model.Password);

            if (result.Succeeded)
            {
                if (Model.SelectedRoles.Any())
                {
                    await UserManager.AddToRolesAsync(newUser, Model.SelectedRoles);
                }
                Navigation.NavigateTo("/admin/users");
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    errorMessages.Add(error.Description);
                }
            }
        }
    }
    
