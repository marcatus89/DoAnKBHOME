@page "/san-pham"
@page "/san-pham/page/{PageNumber:int}"

@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<div class="container-fluid">
    <h2 class="section-title">Tất cả Sản phẩm</h2>
    <hr class="section-divider" />
    
    @* Thêm component bộ lọc vào đây *@
    <FilterControls SortChanged="ApplySort" />

    @if (pagedProducts == null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="row">
            @foreach (var product in pagedProducts)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100 product-card">
                        <a href="@($"/san-pham/{product.Id}")">
                            <img class="card-img-top" src="@product.ImageUrl" alt="@product.Name">
                        </a>
                        <div class="card-body text-center">
                            <h5 class="card-title">
                                <a href="@($"/san-pham/{product.Id}")">@product.Name</a>
                            </h5>
                            <h6 class="price-tag">@product.Price.ToString("n0") VNĐ</h6>
                        </div>
                    </div>
                </div>
            }
        </div>

        @* Thanh phân trang *@
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="@($"/san-pham/page/{currentPage - 1}")">Trước</a>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageNum = i;
                    <li class="page-item @(currentPage == pageNum ? "active" : "")">
                        <a class="page-link" href="@($"/san-pham/page/{pageNum}")">@pageNum</a>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" href="@($"/san-pham/page/{currentPage + 1}")">Sau</a>
                </li>
            </ul>
        </nav>
    }
</div>


@code {
    [Parameter]
    public int PageNumber { get; set; } = 1;

    private List<Product>? pagedProducts;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 6;
    private string currentSort = "default";

    protected override async Task OnParametersSetAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        currentPage = PageNumber < 1 ? 1 : PageNumber;

        var query = DbContext.Products.AsQueryable();
        
       
        switch (currentSort)
        {
            case "price_asc":
                query = query.OrderBy(p => (double)p.Price);
                break;
            case "price_desc":
                query = query.OrderByDescending(p => (double)p.Price);
                break;
            default:
                query = query.OrderByDescending(p => p.Id);
                break;
        }

        var totalProducts = await query.CountAsync();
        totalPages = (int)Math.Ceiling(totalProducts / (double)pageSize);
        
        pagedProducts = await query
                                .Skip((currentPage - 1) * pageSize)
                                .Take(pageSize)
                                .ToListAsync();
    }

    private async Task ApplySort(string sort)
    {
        currentSort = sort;
        
        await LoadProducts();
    }
}